// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\BirdEyeView_Bilinear_V1\BirdEyeViewImproved_ip_src_Line_Buffer_Write_Address.v
// Created: 2019-03-29 20:31:29
// 
// Generated by MATLAB 9.6 and HDL Coder 3.14
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: BirdEyeViewImproved_ip_src_Line_Buffer_Write_Address
// Source Path: BirdEyeView_Bilinear_V1/IP_Core/Line_Buffer_Write_Address
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module BirdEyeViewImproved_ip_src_Line_Buffer_Write_Address
          (col,
           row,
           valid,
           Wr_Adr_0,
           En_0,
           Wr_Adr_1,
           En_1,
           Wr_Adr_2,
           En_2,
           Wr_Adr_3,
           En_3);


  input   [9:0] col;  // ufix10
  input   [9:0] row;  // ufix10
  input   valid;
  output  [11:0] Wr_Adr_0;  // ufix12
  output  En_0;
  output  [11:0] Wr_Adr_1;  // ufix12
  output  En_1;
  output  [11:0] Wr_Adr_2;  // ufix12
  output  En_2;
  output  [11:0] Wr_Adr_3;  // ufix12
  output  En_3;


  reg [11:0] Wr_Adr_0_1;  // ufix12
  reg  En_0_1;
  reg [11:0] Wr_Adr_1_1;  // ufix12
  reg  En_1_1;
  reg [11:0] Wr_Adr_2_1;  // ufix12
  reg  En_2_1;
  reg [11:0] Wr_Adr_3_1;  // ufix12
  reg  En_3_1;
  reg signed [31:0] Dump;  // double
  reg [8:0] row_adr;  // ufix9
  reg [9:0] col_adr;  // ufix10
  reg  Dump_fi;  // ufix1
  reg signed [33:0] full_adr_0;  // sfix34_En15
  reg signed [34:0] full_adr_1;  // sfix35_En15
  reg signed [34:0] full_adr_2;  // sfix35_En15
  reg signed [34:0] full_adr_3;  // sfix35_En15
  reg signed [31:0] row1;  // ufix10
  reg signed [31:0] col1;  // ufix10
  reg signed [31:0] sub_temp;  // int32
  reg signed [9:0] cast;  // sfix10
  reg signed [25:0] mul_temp;  // sfix26_En7
  reg signed [24:0] add_cast;  // sfix25_En7
  reg signed [33:0] add_cast_0;  // sfix34_En15
  reg signed [10:0] add_cast_1;  // sfix11_En1
  reg signed [26:0] add_cast_2;  // sfix27_En15
  reg signed [25:0] add_cast_3;  // sfix26_En15
  reg signed [33:0] add_cast_4;  // sfix34_En15
  reg signed [34:0] sub_cast;  // sfix35_En15
  reg signed [34:0] sub_cast_0;  // sfix35_En15
  reg signed [34:0] sub_cast_1;  // sfix35_En15


  always @(col, row, valid) begin
    // row_adr = fi(row,0,9,0);
    // col_adr = fi(col,0,10,0);
    row1 = {22'b0, row};
    col1 = {22'b0, col};
    //The following code ensures that row is always within the range [0 24],
    //Row 24 is the dump for unwanted rows <196 and >219. 
    if ((row1 < 32'sd196) || (row1 > 32'sd219)) begin
      row1 = 32'sd220;
      Dump = 32'sd0;
    end
    else begin
      Dump = 32'sd1;
    end
    // Dump = 1;
    sub_temp = row1 - 32'sd196;
    if ((sub_temp[31] == 1'b0) && (sub_temp[30:9] != 22'b0000000000000000000000)) begin
      row_adr = 9'b111111111;
    end
    else if (sub_temp[31] == 1'b1) begin
      row_adr = 9'b000000000;
    end
    else begin
      row_adr = sub_temp[8:0];
    end
    col_adr = col1[9:0];
    Dump_fi = Dump[0];
    cast = {1'b0, row_adr};
    mul_temp = cast * 16'sb0101000000000000;
    if ((mul_temp[25] == 1'b0) && (mul_temp[24] != 1'b0)) begin
      add_cast = 25'sb0111111111111111111111111;
    end
    else if ((mul_temp[25] == 1'b1) && (mul_temp[24] != 1'b1)) begin
      add_cast = 25'sb1000000000000000000000000;
    end
    else begin
      add_cast = mul_temp[24:0];
    end
    add_cast_0 = {add_cast[24], {add_cast, 8'b00000000}};
    add_cast_1 = {1'b0, col_adr};
    add_cast_2 = {{2{add_cast_1[10]}}, {add_cast_1, 14'b00000000000000}};
    if ((add_cast_2[26] == 1'b0) && (add_cast_2[25] != 1'b0)) begin
      add_cast_3 = 26'sb01111111111111111111111111;
    end
    else if ((add_cast_2[26] == 1'b1) && (add_cast_2[25] != 1'b1)) begin
      add_cast_3 = 26'sb10000000000000000000000000;
    end
    else begin
      add_cast_3 = add_cast_2[25:0];
    end
    add_cast_4 = {{8{add_cast_3[25]}}, add_cast_3};
    full_adr_0 = add_cast_0 + add_cast_4;
    sub_cast = {full_adr_0[33], full_adr_0};
    full_adr_1 = sub_cast - 35'sh000004000;
    sub_cast_0 = {full_adr_0[33], full_adr_0};
    full_adr_2 = sub_cast_0 - 35'sh000500000;
    sub_cast_1 = {full_adr_0[33], full_adr_0};
    full_adr_3 = sub_cast_1 - 35'sh000504000;
    // full_adr_1 = row_adr*fi(160) + (col_adr-1)*fi(0.5);
    // full_adr_2 = (row_adr-1)*fi(160) + col_adr*fi(0.5);
    // full_adr_3 = (row_adr-1)*fi(160) + (col_adr-1)*fi(0.5);
    //Memory Size = 25*160=4000(=2^12)
    if (((full_adr_0[33] == 1'b0) && (full_adr_0[32:27] != 6'b000000)) || ((full_adr_0[33] == 1'b0) && (full_adr_0[26:15] == 12'b111111111111))) begin
      Wr_Adr_0_1 = 12'b111111111111;
    end
    else if (full_adr_0[33] == 1'b1) begin
      Wr_Adr_0_1 = 12'b000000000000;
    end
    else begin
      Wr_Adr_0_1 = full_adr_0[26:15] + full_adr_0[14];
    end
    if (((full_adr_1[34] == 1'b0) && (full_adr_1[33:27] != 7'b0000000)) || ((full_adr_1[34] == 1'b0) && (full_adr_1[26:15] == 12'b111111111111))) begin
      Wr_Adr_1_1 = 12'b111111111111;
    end
    else if (full_adr_1[34] == 1'b1) begin
      Wr_Adr_1_1 = 12'b000000000000;
    end
    else begin
      Wr_Adr_1_1 = full_adr_1[26:15] + full_adr_1[14];
    end
    if (((full_adr_2[34] == 1'b0) && (full_adr_2[33:27] != 7'b0000000)) || ((full_adr_2[34] == 1'b0) && (full_adr_2[26:15] == 12'b111111111111))) begin
      Wr_Adr_2_1 = 12'b111111111111;
    end
    else if (full_adr_2[34] == 1'b1) begin
      Wr_Adr_2_1 = 12'b000000000000;
    end
    else begin
      Wr_Adr_2_1 = full_adr_2[26:15] + full_adr_2[14];
    end
    if (((full_adr_3[34] == 1'b0) && (full_adr_3[33:27] != 7'b0000000)) || ((full_adr_3[34] == 1'b0) && (full_adr_3[26:15] == 12'b111111111111))) begin
      Wr_Adr_3_1 = 12'b111111111111;
    end
    else if (full_adr_3[34] == 1'b1) begin
      Wr_Adr_3_1 = 12'b000000000000;
    end
    else begin
      Wr_Adr_3_1 = full_adr_3[26:15] + full_adr_3[14];
    end
    En_0_1 = (((row_adr[0] == 1'b0) && (col_adr[0] == 1'b0)) && valid) && Dump_fi;
    En_1_1 = (((row_adr[0] == 1'b0) && (col_adr[0] != 1'b0)) && valid) && Dump_fi;
    En_2_1 = ((row_adr[0] != 1'b0) && (col_adr[0] == 1'b0)) && valid;
    En_3_1 = ((row_adr[0] != 1'b0) && (col_adr[0] != 1'b0)) && valid;
  end



  assign Wr_Adr_0 = Wr_Adr_0_1;

  assign En_0 = En_0_1;

  assign Wr_Adr_1 = Wr_Adr_1_1;

  assign En_1 = En_1_1;

  assign Wr_Adr_2 = Wr_Adr_2_1;

  assign En_2 = En_2_1;

  assign Wr_Adr_3 = Wr_Adr_3_1;

  assign En_3 = En_3_1;

endmodule  // BirdEyeViewImproved_ip_src_Line_Buffer_Write_Address

