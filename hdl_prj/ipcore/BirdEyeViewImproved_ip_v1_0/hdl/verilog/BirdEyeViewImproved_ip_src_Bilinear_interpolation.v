// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\BirdEyeView_Bilinear_V1\BirdEyeViewImproved_ip_src_Bilinear_interpolation.v
// Created: 2019-03-29 20:31:29
// 
// Generated by MATLAB 9.6 and HDL Coder 3.14
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: BirdEyeViewImproved_ip_src_Bilinear_interpolation
// Source Path: BirdEyeView_Bilinear_V1/IP_Core/Bilinear interpolation
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module BirdEyeViewImproved_ip_src_Bilinear_interpolation
          (clk,
           reset,
           enb,
           D00,
           D11,
           D22,
           D33,
           deltaC,
           deltaR,
           Out1);


  input   clk;
  input   reset;
  input   enb;
  input   [7:0] D00;  // uint8
  input   [7:0] D11;  // uint8
  input   [7:0] D22;  // uint8
  input   [7:0] D33;  // uint8
  input   signed [50:0] deltaC;  // sfix51_En35
  input   signed [39:0] deltaR;  // sfix40_En29
  output  signed [101:0] Out1;  // sfix102_En64


  reg [7:0] Delay5_out1;  // uint8
  reg signed [39:0] Delay6_out1;  // sfix40_En29
  wire signed [90:0] Product_out1;  // sfix91_En64
  reg signed [90:0] Delay20_out1;  // sfix91_En64
  wire signed [91:0] Sum4_sub_cast;  // sfix92_En64
  wire signed [91:0] Sum4_sub_cast_1;  // sfix92_En64
  wire signed [91:0] Sum4_out1;  // sfix92_En64
  wire signed [8:0] Product3_cast;  // sfix9
  wire signed [100:0] Product3_mul_temp;  // sfix101_En64
  wire signed [99:0] Product3_out1;  // sfix100_En64
  reg signed [99:0] Delay24_out1;  // sfix100_En64
  reg [7:0] Delay3_out1;  // uint8
  reg signed [50:0] Delay1_out1;  // sfix51_En35
  wire signed [91:0] Sum3_sub_cast;  // sfix92_En64
  wire signed [91:0] Sum3_sub_cast_1;  // sfix92_En64
  wire signed [91:0] Sum3_out1;  // sfix92_En64
  wire signed [8:0] Product2_cast;  // sfix9
  wire signed [100:0] Product2_mul_temp;  // sfix101_En64
  wire signed [99:0] Product2_out1;  // sfix100_En64
  reg [7:0] Delay4_out1;  // uint8
  wire Constant_out1;
  wire signed [51:0] Sum_add_cast;  // sfix52_En35
  wire signed [51:0] Sum_add_cast_1;  // sfix52_En35
  wire signed [51:0] Sum_out1;  // sfix52_En35
  wire signed [52:0] Sum1_sub_cast;  // sfix53_En35
  wire signed [52:0] Sum1_sub_cast_1;  // sfix53_En35
  wire signed [52:0] Sum1_out1;  // sfix53_En35
  reg signed [52:0] Delay21_out1;  // sfix53_En35
  wire signed [91:0] Sum2_add_cast;  // sfix92_En64
  wire signed [91:0] Sum2_add_cast_1;  // sfix92_En64
  wire signed [91:0] Sum2_out1;  // sfix92_En64
  wire signed [8:0] Product1_cast;  // sfix9
  wire signed [100:0] Product1_mul_temp;  // sfix101_En64
  wire signed [99:0] Product1_out1;  // sfix100_En64
  reg signed [99:0] Delay22_out1;  // sfix100_En64
  reg [7:0] Delay2_out1;  // uint8
  wire signed [8:0] Product4_cast;  // sfix9
  wire signed [99:0] Product4_mul_temp;  // sfix100_En64
  wire signed [98:0] Product4_out1;  // sfix99_En64
  reg signed [99:0] Delay23_out1;  // sfix100_En64
  wire signed [100:0] Sum5_add_cast;  // sfix101_En64
  wire signed [100:0] Sum5_add_cast_1;  // sfix101_En64
  wire signed [100:0] Sum5_out1;  // sfix101_En64
  reg signed [98:0] Delay25_out1;  // sfix99_En64
  wire signed [100:0] Sum7_add_cast;  // sfix101_En64
  wire signed [100:0] Sum7_add_cast_1;  // sfix101_En64
  wire signed [100:0] Sum7_out1;  // sfix101_En64
  wire signed [101:0] Sum6_add_cast;  // sfix102_En64
  wire signed [101:0] Sum6_add_cast_1;  // sfix102_En64
  wire signed [101:0] Sum6_out1;  // sfix102_En64


  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= D22;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 40'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= deltaR;
        end
      end
    end



  assign Product_out1 = deltaC * deltaR;



  always @(posedge clk or posedge reset)
    begin : Delay20_process
      if (reset == 1'b1) begin
        Delay20_out1 <= 91'sh00000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay20_out1 <= Product_out1;
        end
      end
    end



  assign Sum4_sub_cast = {{17{Delay6_out1[39]}}, {Delay6_out1, 35'b00000000000000000000000000000000000}};
  assign Sum4_sub_cast_1 = {Delay20_out1[90], Delay20_out1};
  assign Sum4_out1 = Sum4_sub_cast - Sum4_sub_cast_1;



  assign Product3_cast = {1'b0, Delay5_out1};
  assign Product3_mul_temp = Product3_cast * Sum4_out1;
  assign Product3_out1 = Product3_mul_temp[99:0];



  always @(posedge clk or posedge reset)
    begin : Delay24_process
      if (reset == 1'b1) begin
        Delay24_out1 <= 100'sh0000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay24_out1 <= Product3_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= D11;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 51'sh0000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= deltaC;
        end
      end
    end



  assign Sum3_sub_cast = {{12{Delay1_out1[50]}}, {Delay1_out1, 29'b00000000000000000000000000000}};
  assign Sum3_sub_cast_1 = {Delay20_out1[90], Delay20_out1};
  assign Sum3_out1 = Sum3_sub_cast - Sum3_sub_cast_1;



  assign Product2_cast = {1'b0, Delay3_out1};
  assign Product2_mul_temp = Product2_cast * Sum3_out1;
  assign Product2_out1 = Product2_mul_temp[99:0];



  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= D00;
        end
      end
    end



  assign Constant_out1 = 1'b1;



  assign Sum_add_cast = {{6{deltaR[39]}}, {deltaR, 6'b000000}};
  assign Sum_add_cast_1 = {deltaC[50], deltaC};
  assign Sum_out1 = Sum_add_cast + Sum_add_cast_1;



  assign Sum1_sub_cast = {17'b0, {Constant_out1, 35'b00000000000000000000000000000000000}};
  assign Sum1_sub_cast_1 = {Sum_out1[51], Sum_out1};
  assign Sum1_out1 = Sum1_sub_cast - Sum1_sub_cast_1;



  always @(posedge clk or posedge reset)
    begin : Delay21_process
      if (reset == 1'b1) begin
        Delay21_out1 <= 53'sh00000000000000;
      end
      else begin
        if (enb) begin
          Delay21_out1 <= Sum1_out1;
        end
      end
    end



  assign Sum2_add_cast = {Delay20_out1[90], Delay20_out1};
  assign Sum2_add_cast_1 = {{10{Delay21_out1[52]}}, {Delay21_out1, 29'b00000000000000000000000000000}};
  assign Sum2_out1 = Sum2_add_cast + Sum2_add_cast_1;



  assign Product1_cast = {1'b0, Delay4_out1};
  assign Product1_mul_temp = Product1_cast * Sum2_out1;
  assign Product1_out1 = Product1_mul_temp[99:0];



  always @(posedge clk or posedge reset)
    begin : Delay22_process
      if (reset == 1'b1) begin
        Delay22_out1 <= 100'sh0000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay22_out1 <= Product1_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= D33;
        end
      end
    end



  assign Product4_cast = {1'b0, Delay2_out1};
  assign Product4_mul_temp = Delay20_out1 * Product4_cast;
  assign Product4_out1 = Product4_mul_temp[98:0];



  always @(posedge clk or posedge reset)
    begin : Delay23_process
      if (reset == 1'b1) begin
        Delay23_out1 <= 100'sh0000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay23_out1 <= Product2_out1;
        end
      end
    end



  assign Sum5_add_cast = {Delay24_out1[99], Delay24_out1};
  assign Sum5_add_cast_1 = {Delay23_out1[99], Delay23_out1};
  assign Sum5_out1 = Sum5_add_cast + Sum5_add_cast_1;



  always @(posedge clk or posedge reset)
    begin : Delay25_process
      if (reset == 1'b1) begin
        Delay25_out1 <= 99'sh0000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay25_out1 <= Product4_out1;
        end
      end
    end



  assign Sum7_add_cast = {Delay22_out1[99], Delay22_out1};
  assign Sum7_add_cast_1 = {{2{Delay25_out1[98]}}, Delay25_out1};
  assign Sum7_out1 = Sum7_add_cast + Sum7_add_cast_1;



  assign Sum6_add_cast = {Sum5_out1[100], Sum5_out1};
  assign Sum6_add_cast_1 = {Sum7_out1[100], Sum7_out1};
  assign Sum6_out1 = Sum6_add_cast + Sum6_add_cast_1;



  assign Out1 = Sum6_out1;

endmodule  // BirdEyeViewImproved_ip_src_Bilinear_interpolation

