// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\BirdEyeView_Bilinear_V1\BirdEyeViewImproved_ip_src_IP_Core.v
// Created: 2019-03-29 20:31:29
// 
// Generated by MATLAB 9.6 and HDL Coder 3.14
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.001
// Target subsystem base rate: 0.001
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        0.001
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// pixelOut                      ce_out        0.001
// ctrlOut_hStart                ce_out        0.001
// ctrlOut_hEnd                  ce_out        0.001
// ctrlOut_vStart                ce_out        0.001
// ctrlOut_vEnd                  ce_out        0.001
// ctrlOut_valid                 ce_out        0.001
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: BirdEyeViewImproved_ip_src_IP_Core
// Source Path: BirdEyeView_Bilinear_V1/IP_Core
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module BirdEyeViewImproved_ip_src_IP_Core
          (clk,
           reset,
           clk_enable,
           pixelIn,
           ctrlIn_hStart,
           ctrlIn_hEnd,
           ctrlIn_vStart,
           ctrlIn_vEnd,
           ctrlIn_valid,
           ce_out,
           pixelOut,
           ctrlOut_hStart,
           ctrlOut_hEnd,
           ctrlOut_vStart,
           ctrlOut_vEnd,
           ctrlOut_valid);


  input   clk;
  input   reset;
  input   clk_enable;
  input   [31:0] pixelIn;  // uint32
  input   ctrlIn_hStart;
  input   ctrlIn_hEnd;
  input   ctrlIn_vStart;
  input   ctrlIn_vEnd;
  input   ctrlIn_valid;
  output  ce_out;
  output  [31:0] pixelOut;  // uint32
  output  ctrlOut_hStart;
  output  ctrlOut_hEnd;
  output  ctrlOut_vStart;
  output  ctrlOut_vEnd;
  output  ctrlOut_valid;


  wire enb;
  wire [7:0] RGB2Vector_out1_0;  // uint8
  wire [7:0] RGB2Vector_out1_1;  // uint8
  wire [7:0] RGB2Vector_out1_2;  // uint8
  wire [7:0] Color_Space_Converter_out1;  // uint8
  wire Color_Space_Converter_out2_hStart;
  wire Color_Space_Converter_out2_hEnd;
  wire Color_Space_Converter_out2_vStart;
  wire Color_Space_Converter_out2_vEnd;
  wire Color_Space_Converter_out2_valid;
  wire hStart;
  wire valid;
  reg [9:0] col_out1;  // ufix10
  wire vStart;
  reg [9:0] row_out1;  // ufix10
  reg [7:0] Delay10_out1;  // uint8
  wire [11:0] Wr_Adr_0;  // ufix12
  wire En_0;
  wire [11:0] Wr_Adr_1;  // ufix12
  wire En_1;
  wire [11:0] Wr_Adr_2;  // ufix12
  wire En_2;
  wire [11:0] Wr_Adr_3;  // ufix12
  wire En_3;
  wire [11:0] Rd_Adr_0;  // ufix12
  wire [11:0] Rd_Adr_1;  // ufix12
  wire [11:0] Rd_Adr_2;  // ufix12
  wire [11:0] Rd_Adr_3;  // ufix12
  wire [1:0] mem_sel;  // ufix2
  wire signed [39:0] deltaR;  // sfix40_En29
  wire signed [50:0] deltaC;  // sfix51_En35
  wire [7:0] RAM0_out1;  // uint8
  wire [7:0] RAM0_out2;  // uint8
  reg [7:0] Delay16_out1;  // uint8
  wire [7:0] RAM1_out1;  // uint8
  wire [7:0] RAM1_out2;  // uint8
  reg [7:0] Delay17_out1;  // uint8
  wire [7:0] RAM2_out1;  // uint8
  wire [7:0] RAM2_out2;  // uint8
  reg [7:0] Delay18_out1;  // uint8
  wire [7:0] RAM3_out1;  // uint8
  wire [7:0] RAM3_out2;  // uint8
  reg [7:0] Delay19_out1;  // uint8
  reg [1:0] Delay_reg [0:1];  // ufix2 [2]
  wire [1:0] Delay_reg_next [0:1];  // ufix2 [2]
  wire [1:0] Delay_out1;  // ufix2
  reg signed [39:0] Delay1_reg [0:1];  // sfix40 [2]
  wire signed [39:0] Delay1_reg_next [0:1];  // sfix40_En29 [2]
  wire signed [39:0] Delay1_out1;  // sfix40_En29
  reg signed [50:0] Delay2_reg [0:1];  // sfix51 [2]
  wire signed [50:0] Delay2_reg_next [0:1];  // sfix51_En35 [2]
  wire signed [50:0] Delay2_out1;  // sfix51_En35
  wire [7:0] D00;  // uint8
  wire [7:0] D11;  // uint8
  wire [7:0] D22;  // uint8
  wire [7:0] D33;  // uint8
  wire signed [101:0] Bilinear_interpolation_out1;  // sfix102_En64
  wire [31:0] RGB_out;  // uint32
  reg  [0:3] alpha_reg;  // ufix1 [4]
  wire [0:3] alpha_reg_next;  // ufix1 [4]
  wire Delay26_out1_hStart;
  reg  [0:3] alpha_reg_1;  // ufix1 [4]
  wire [0:3] alpha_reg_next_1;  // ufix1 [4]
  wire Delay26_out1_hEnd;
  reg  [0:3] alpha_reg_2;  // ufix1 [4]
  wire [0:3] alpha_reg_next_2;  // ufix1 [4]
  wire Delay26_out1_vStart;
  reg  [0:3] alpha_reg_3;  // ufix1 [4]
  wire [0:3] alpha_reg_next_3;  // ufix1 [4]
  wire Delay26_out1_vEnd;
  reg  [0:3] alpha_reg_4;  // ufix1 [4]
  wire [0:3] alpha_reg_next_4;  // ufix1 [4]
  wire Delay26_out1_valid;
  wire hEnd;
  wire vEnd;


  BirdEyeViewImproved_ip_src_RGB2Vector u_RGB2Vector (.RGB(pixelIn),  // uint32
                                                      .RGBVector_0(RGB2Vector_out1_0),  // uint8
                                                      .RGBVector_1(RGB2Vector_out1_1),  // uint8
                                                      .RGBVector_2(RGB2Vector_out1_2)  // uint8
                                                      );

  BirdEyeViewImproved_ip_src_Color_Space_Converter u_Color_Space_Converter (.clk(clk),
                                                                            .reset(reset),
                                                                            .enb(clk_enable),
                                                                            .in0_0(RGB2Vector_out1_0),  // uint8
                                                                            .in0_1(RGB2Vector_out1_1),  // uint8
                                                                            .in0_2(RGB2Vector_out1_2),  // uint8
                                                                            .in1_hStart(ctrlIn_hStart),
                                                                            .in1_hEnd(ctrlIn_hEnd),
                                                                            .in1_vStart(ctrlIn_vStart),
                                                                            .in1_vEnd(ctrlIn_vEnd),
                                                                            .in1_valid(ctrlIn_valid),
                                                                            .out0(Color_Space_Converter_out1),  // uint8
                                                                            .out1_hStart(Color_Space_Converter_out2_hStart),
                                                                            .out1_hEnd(Color_Space_Converter_out2_hEnd),
                                                                            .out1_vStart(Color_Space_Converter_out2_vStart),
                                                                            .out1_vEnd(Color_Space_Converter_out2_vEnd),
                                                                            .out1_valid(Color_Space_Converter_out2_valid)
                                                                            );

  assign hStart = Color_Space_Converter_out2_hStart;

  assign valid = Color_Space_Converter_out2_valid;

  assign enb = clk_enable;

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 638
  always @(posedge clk or posedge reset)
    begin : col_process
      if (reset == 1'b1) begin
        col_out1 <= 10'b0000000000;
      end
      else begin
        if (enb) begin
          if (hStart == 1'b1) begin
            col_out1 <= 10'b0000000000;
          end
          else if (valid == 1'b1) begin
            if (col_out1 >= 10'b1001111110) begin
              col_out1 <= 10'b0000000000;
            end
            else begin
              col_out1 <= col_out1 + 10'b0000000001;
            end
          end
        end
      end
    end



  assign vStart = Color_Space_Converter_out2_vStart;

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 638
  always @(posedge clk or posedge reset)
    begin : row_process
      if (reset == 1'b1) begin
        row_out1 <= 10'b0000000000;
      end
      else begin
        if (enb) begin
          if (vStart == 1'b1) begin
            row_out1 <= 10'b0000000000;
          end
          else if (hStart == 1'b1) begin
            if (row_out1 >= 10'b1001111110) begin
              row_out1 <= 10'b0000000000;
            end
            else begin
              row_out1 <= row_out1 + 10'b0000000001;
            end
          end
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay10_process
      if (reset == 1'b1) begin
        Delay10_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay10_out1 <= Color_Space_Converter_out1;
        end
      end
    end



  BirdEyeViewImproved_ip_src_Line_Buffer_Write_Address u_Line_Buffer_Write_Address (.col(col_out1),  // ufix10
                                                                                    .row(row_out1),  // ufix10
                                                                                    .valid(Color_Space_Converter_out2_valid),
                                                                                    .Wr_Adr_0(Wr_Adr_0),  // ufix12
                                                                                    .En_0(En_0),
                                                                                    .Wr_Adr_1(Wr_Adr_1),  // ufix12
                                                                                    .En_1(En_1),
                                                                                    .Wr_Adr_2(Wr_Adr_2),  // ufix12
                                                                                    .En_2(En_2),
                                                                                    .Wr_Adr_3(Wr_Adr_3),  // ufix12
                                                                                    .En_3(En_3)
                                                                                    );

  BirdEyeViewImproved_ip_src_Line_Buffer_Read_Address u_Line_Buffer_Read_Address (.col(col_out1),  // ufix10
                                                                                  .row(row_out1),  // ufix10
                                                                                  .Rd_Adr_0(Rd_Adr_0),  // ufix12
                                                                                  .Rd_Adr_1(Rd_Adr_1),  // ufix12
                                                                                  .Rd_Adr_2(Rd_Adr_2),  // ufix12
                                                                                  .Rd_Adr_3(Rd_Adr_3),  // ufix12
                                                                                  .mem_sel(mem_sel),  // ufix2
                                                                                  .deltaR(deltaR),  // sfix40_En29
                                                                                  .deltaC(deltaC)  // sfix51_En35
                                                                                  );

  BirdEyeViewImproved_ip_src_DualPortRAM_generic #(.AddrWidth(12),
                                                   .DataWidth(8)
                                                   )
                                                 u_RAM0 (.clk(clk),
                                                         .enb(clk_enable),
                                                         .wr_din(Delay10_out1),
                                                         .wr_addr(Wr_Adr_0),
                                                         .wr_en(En_0),
                                                         .rd_addr(Rd_Adr_0),
                                                         .wr_dout(RAM0_out1),
                                                         .rd_dout(RAM0_out2)
                                                         );

  always @(posedge clk or posedge reset)
    begin : Delay16_process
      if (reset == 1'b1) begin
        Delay16_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay16_out1 <= RAM0_out2;
        end
      end
    end



  BirdEyeViewImproved_ip_src_DualPortRAM_generic #(.AddrWidth(12),
                                                   .DataWidth(8)
                                                   )
                                                 u_RAM1 (.clk(clk),
                                                         .enb(clk_enable),
                                                         .wr_din(Delay10_out1),
                                                         .wr_addr(Wr_Adr_1),
                                                         .wr_en(En_1),
                                                         .rd_addr(Rd_Adr_1),
                                                         .wr_dout(RAM1_out1),
                                                         .rd_dout(RAM1_out2)
                                                         );

  always @(posedge clk or posedge reset)
    begin : Delay17_process
      if (reset == 1'b1) begin
        Delay17_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay17_out1 <= RAM1_out2;
        end
      end
    end



  BirdEyeViewImproved_ip_src_DualPortRAM_generic #(.AddrWidth(12),
                                                   .DataWidth(8)
                                                   )
                                                 u_RAM2 (.clk(clk),
                                                         .enb(clk_enable),
                                                         .wr_din(Delay10_out1),
                                                         .wr_addr(Wr_Adr_2),
                                                         .wr_en(En_2),
                                                         .rd_addr(Rd_Adr_2),
                                                         .wr_dout(RAM2_out1),
                                                         .rd_dout(RAM2_out2)
                                                         );

  always @(posedge clk or posedge reset)
    begin : Delay18_process
      if (reset == 1'b1) begin
        Delay18_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay18_out1 <= RAM2_out2;
        end
      end
    end



  BirdEyeViewImproved_ip_src_DualPortRAM_generic #(.AddrWidth(12),
                                                   .DataWidth(8)
                                                   )
                                                 u_RAM3 (.clk(clk),
                                                         .enb(clk_enable),
                                                         .wr_din(Delay10_out1),
                                                         .wr_addr(Wr_Adr_3),
                                                         .wr_en(En_3),
                                                         .rd_addr(Rd_Adr_3),
                                                         .wr_dout(RAM3_out1),
                                                         .rd_dout(RAM3_out2)
                                                         );

  always @(posedge clk or posedge reset)
    begin : Delay19_process
      if (reset == 1'b1) begin
        Delay19_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay19_out1 <= RAM3_out2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_reg[0] <= 2'b00;
        Delay_reg[1] <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay_reg[0] <= Delay_reg_next[0];
          Delay_reg[1] <= Delay_reg_next[1];
        end
      end
    end

  assign Delay_out1 = Delay_reg[1];
  assign Delay_reg_next[0] = mem_sel;
  assign Delay_reg_next[1] = Delay_reg[0];



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_reg[0] <= 40'sh0000000000;
        Delay1_reg[1] <= 40'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay1_reg[0] <= Delay1_reg_next[0];
          Delay1_reg[1] <= Delay1_reg_next[1];
        end
      end
    end

  assign Delay1_out1 = Delay1_reg[1];
  assign Delay1_reg_next[0] = deltaR;
  assign Delay1_reg_next[1] = Delay1_reg[0];



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_reg[0] <= 51'sh0000000000000;
        Delay2_reg[1] <= 51'sh0000000000000;
      end
      else begin
        if (enb) begin
          Delay2_reg[0] <= Delay2_reg_next[0];
          Delay2_reg[1] <= Delay2_reg_next[1];
        end
      end
    end

  assign Delay2_out1 = Delay2_reg[1];
  assign Delay2_reg_next[0] = deltaC;
  assign Delay2_reg_next[1] = Delay2_reg[0];



  BirdEyeViewImproved_ip_src_Data_Mux u_Data_Mux (.D0(Delay16_out1),  // uint8
                                                  .D1(Delay17_out1),  // uint8
                                                  .D2(Delay18_out1),  // uint8
                                                  .D3(Delay19_out1),  // uint8
                                                  .mem_sel(Delay_out1),  // ufix2
                                                  .deltaR(Delay1_out1),  // sfix40_En29
                                                  .deltaC(Delay2_out1),  // sfix51_En35
                                                  .D00(D00),  // uint8
                                                  .D11(D11),  // uint8
                                                  .D22(D22),  // uint8
                                                  .D33(D33)  // uint8
                                                  );

  BirdEyeViewImproved_ip_src_Bilinear_interpolation u_Bilinear_interpolation (.clk(clk),
                                                                              .reset(reset),
                                                                              .enb(clk_enable),
                                                                              .D00(D00),  // uint8
                                                                              .D11(D11),  // uint8
                                                                              .D22(D22),  // uint8
                                                                              .D33(D33),  // uint8
                                                                              .deltaC(Delay2_out1),  // sfix51_En35
                                                                              .deltaR(Delay1_out1),  // sfix40_En29
                                                                              .Out1(Bilinear_interpolation_out1)  // sfix102_En64
                                                                              );

  BirdEyeViewImproved_ip_src_rgb_signal_gen u_rgb_signal_gen (.col(col_out1),  // ufix10
                                                              .row(row_out1),  // ufix10
                                                              .Pixel_Data(Bilinear_interpolation_out1),  // sfix102_En64
                                                              .RGB_out(RGB_out)  // uint32
                                                              );

  assign pixelOut = RGB_out;

  always @(posedge clk or posedge reset)
    begin : c_process
      if (reset == 1'b1) begin
        alpha_reg[0] <= 1'b0;
        alpha_reg[1] <= 1'b0;
        alpha_reg[2] <= 1'b0;
        alpha_reg[3] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg[0] <= alpha_reg_next[0];
          alpha_reg[1] <= alpha_reg_next[1];
          alpha_reg[2] <= alpha_reg_next[2];
          alpha_reg[3] <= alpha_reg_next[3];
        end
      end
    end

  assign Delay26_out1_hStart = alpha_reg[3];
  assign alpha_reg_next[0] = Color_Space_Converter_out2_hStart;
  assign alpha_reg_next[1] = alpha_reg[0];
  assign alpha_reg_next[2] = alpha_reg[1];
  assign alpha_reg_next[3] = alpha_reg[2];



  assign ctrlOut_hStart = Delay26_out1_hStart;

  always @(posedge clk or posedge reset)
    begin : c_1_process
      if (reset == 1'b1) begin
        alpha_reg_1[0] <= 1'b0;
        alpha_reg_1[1] <= 1'b0;
        alpha_reg_1[2] <= 1'b0;
        alpha_reg_1[3] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg_1[0] <= alpha_reg_next_1[0];
          alpha_reg_1[1] <= alpha_reg_next_1[1];
          alpha_reg_1[2] <= alpha_reg_next_1[2];
          alpha_reg_1[3] <= alpha_reg_next_1[3];
        end
      end
    end

  assign Delay26_out1_hEnd = alpha_reg_1[3];
  assign alpha_reg_next_1[0] = Color_Space_Converter_out2_hEnd;
  assign alpha_reg_next_1[1] = alpha_reg_1[0];
  assign alpha_reg_next_1[2] = alpha_reg_1[1];
  assign alpha_reg_next_1[3] = alpha_reg_1[2];



  assign ctrlOut_hEnd = Delay26_out1_hEnd;

  always @(posedge clk or posedge reset)
    begin : c_2_process
      if (reset == 1'b1) begin
        alpha_reg_2[0] <= 1'b0;
        alpha_reg_2[1] <= 1'b0;
        alpha_reg_2[2] <= 1'b0;
        alpha_reg_2[3] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg_2[0] <= alpha_reg_next_2[0];
          alpha_reg_2[1] <= alpha_reg_next_2[1];
          alpha_reg_2[2] <= alpha_reg_next_2[2];
          alpha_reg_2[3] <= alpha_reg_next_2[3];
        end
      end
    end

  assign Delay26_out1_vStart = alpha_reg_2[3];
  assign alpha_reg_next_2[0] = Color_Space_Converter_out2_vStart;
  assign alpha_reg_next_2[1] = alpha_reg_2[0];
  assign alpha_reg_next_2[2] = alpha_reg_2[1];
  assign alpha_reg_next_2[3] = alpha_reg_2[2];



  assign ctrlOut_vStart = Delay26_out1_vStart;

  always @(posedge clk or posedge reset)
    begin : c_3_process
      if (reset == 1'b1) begin
        alpha_reg_3[0] <= 1'b0;
        alpha_reg_3[1] <= 1'b0;
        alpha_reg_3[2] <= 1'b0;
        alpha_reg_3[3] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg_3[0] <= alpha_reg_next_3[0];
          alpha_reg_3[1] <= alpha_reg_next_3[1];
          alpha_reg_3[2] <= alpha_reg_next_3[2];
          alpha_reg_3[3] <= alpha_reg_next_3[3];
        end
      end
    end

  assign Delay26_out1_vEnd = alpha_reg_3[3];
  assign alpha_reg_next_3[0] = Color_Space_Converter_out2_vEnd;
  assign alpha_reg_next_3[1] = alpha_reg_3[0];
  assign alpha_reg_next_3[2] = alpha_reg_3[1];
  assign alpha_reg_next_3[3] = alpha_reg_3[2];



  assign ctrlOut_vEnd = Delay26_out1_vEnd;

  always @(posedge clk or posedge reset)
    begin : c_4_process
      if (reset == 1'b1) begin
        alpha_reg_4[0] <= 1'b0;
        alpha_reg_4[1] <= 1'b0;
        alpha_reg_4[2] <= 1'b0;
        alpha_reg_4[3] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg_4[0] <= alpha_reg_next_4[0];
          alpha_reg_4[1] <= alpha_reg_next_4[1];
          alpha_reg_4[2] <= alpha_reg_next_4[2];
          alpha_reg_4[3] <= alpha_reg_next_4[3];
        end
      end
    end

  assign Delay26_out1_valid = alpha_reg_4[3];
  assign alpha_reg_next_4[0] = Color_Space_Converter_out2_valid;
  assign alpha_reg_next_4[1] = alpha_reg_4[0];
  assign alpha_reg_next_4[2] = alpha_reg_4[1];
  assign alpha_reg_next_4[3] = alpha_reg_4[2];



  assign ctrlOut_valid = Delay26_out1_valid;

  assign ce_out = clk_enable;

endmodule  // BirdEyeViewImproved_ip_src_IP_Core

