// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\BirdEyeView_Bilinear_V1\BirdEyeViewImproved_ip_src_Line_Buffer_Read_Address.v
// Created: 2019-03-29 20:31:29
// 
// Generated by MATLAB 9.6 and HDL Coder 3.14
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: BirdEyeViewImproved_ip_src_Line_Buffer_Read_Address
// Source Path: BirdEyeView_Bilinear_V1/IP_Core/Line_Buffer_Read_Address
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module BirdEyeViewImproved_ip_src_Line_Buffer_Read_Address
          (col,
           row,
           Rd_Adr_0,
           Rd_Adr_1,
           Rd_Adr_2,
           Rd_Adr_3,
           mem_sel,
           deltaR,
           deltaC);


  input   [9:0] col;  // ufix10
  input   [9:0] row;  // ufix10
  output  [11:0] Rd_Adr_0;  // ufix12
  output  [11:0] Rd_Adr_1;  // ufix12
  output  [11:0] Rd_Adr_2;  // ufix12
  output  [11:0] Rd_Adr_3;  // ufix12
  output  [1:0] mem_sel;  // ufix2
  output  signed [39:0] deltaR;  // sfix40_En29
  output  signed [50:0] deltaC;  // sfix51_En35


  reg [11:0] Rd_Adr_0_1;  // ufix12
  reg [11:0] Rd_Adr_1_1;  // ufix12
  reg [11:0] Rd_Adr_2_1;  // ufix12
  reg [11:0] Rd_Adr_3_1;  // ufix12
  reg [1:0] mem_sel_1;  // ufix2
  reg signed [39:0] deltaR_1;  // sfix40_En29
  reg signed [50:0] deltaC_1;  // sfix51_En35
  reg [1:0] mem_sel1;  // ufix2
  reg [8:0] r_in;  // ufix9
  reg signed [48:0] col_adr;  // sfix49_En35
  reg signed [35:0] row_adr;  // sfix36_En29
  reg [8:0] row_adr_fi;  // ufix9
  reg [9:0] col_adr_fi;  // ufix10
  reg signed [33:0] Base_Adr;  // sfix34_En15
  reg signed [1:0] A0r;  // sfix2
  reg signed [1:0] A0c;  // sfix2
  reg signed [1:0] A1r;  // sfix2
  reg signed [1:0] A1c;  // sfix2
  reg signed [1:0] A2r;  // sfix2
  reg signed [1:0] A2c;  // sfix2
  reg signed [1:0] A3r;  // sfix2
  reg signed [1:0] A3c;  // sfix2
  reg signed [26:0] A0;  // sfix27_En15
  reg signed [26:0] A1;  // sfix27_En15
  reg signed [26:0] A2;  // sfix27_En15
  reg signed [26:0] A3;  // sfix27_En15
  reg [17:0] y;  // ufix18
  reg [17:0] y_0;  // ufix18
  reg [17:0] y_1;  // ufix18
  reg signed [9:0] cast;  // sfix10
  reg signed [25:0] mul_temp;  // sfix26_En18
  reg signed [24:0] add_cast;  // sfix25_En18
  reg signed [27:0] add_cast_0;  // sfix28_En18
  reg signed [27:0] add_temp;  // sfix28_En18
  reg signed [28:0] add_cast_1;  // sfix29_En18
  reg signed [10:0] cast_0;  // sfix11
  reg signed [26:0] mul_temp_0;  // sfix27_En16
  reg signed [25:0] add_cast_2;  // sfix26_En16
  reg signed [28:0] add_cast_3;  // sfix29_En18
  reg signed [28:0] add_temp_0;  // sfix29_En18
  reg signed [38:0] add_cast_4;  // sfix39_En27
  reg signed [18:0] cast_1;  // sfix19
  reg signed [34:0] mul_temp_1;  // sfix35_En27
  reg signed [33:0] add_cast_5;  // sfix34_En27
  reg signed [38:0] add_cast_6;  // sfix39_En27
  reg signed [38:0] add_temp_1;  // sfix39_En27
  reg signed [39:0] add_cast_7;  // sfix40_En27
  reg signed [9:0] cast_2;  // sfix10
  reg signed [25:0] mul_temp_2;  // sfix26_En27
  reg signed [24:0] cast_3;  // sfix25_En27
  reg signed [10:0] cast_4;  // sfix11
  reg signed [35:0] mul_temp_3;  // sfix36_En27
  reg signed [34:0] add_cast_8;  // sfix35_En27
  reg signed [39:0] add_cast_9;  // sfix40_En27
  reg signed [39:0] add_temp_2;  // sfix40_En27
  reg signed [48:0] add_cast_10;  // sfix49_En35
  reg signed [18:0] cast_5;  // sfix19
  reg signed [34:0] mul_temp_4;  // sfix35_En35
  reg signed [33:0] cast_6;  // sfix34_En35
  reg signed [10:0] cast_7;  // sfix11
  reg signed [44:0] mul_temp_5;  // sfix45_En35
  reg signed [43:0] add_cast_11;  // sfix44_En35
  reg signed [48:0] add_cast_12;  // sfix49_En35
  reg signed [9:0] cast_8;  // sfix10
  reg signed [25:0] mul_temp_6;  // sfix26_En20
  reg signed [24:0] add_cast_13;  // sfix25_En20
  reg signed [25:0] add_cast_14;  // sfix26_En20
  reg signed [25:0] add_temp_3;  // sfix26_En20
  reg signed [35:0] add_cast_15;  // sfix36_En29
  reg signed [18:0] cast_9;  // sfix19
  reg signed [34:0] mul_temp_7;  // sfix35_En29
  reg signed [33:0] add_cast_16;  // sfix34_En29
  reg signed [35:0] add_cast_17;  // sfix36_En29
  reg signed [39:0] sub_cast;  // sfix40_En29
  reg signed [39:0] sub_cast_0;  // sfix40_En29
  reg signed [50:0] sub_cast_1;  // sfix51_En35
  reg signed [50:0] sub_cast_2;  // sfix51_En35
  reg signed [9:0] cast_10;  // sfix10
  reg signed [25:0] mul_temp_8;  // sfix26_En7
  reg signed [24:0] add_cast_18;  // sfix25_En7
  reg signed [33:0] add_cast_19;  // sfix34_En15
  reg signed [10:0] add_cast_20;  // sfix11_En1
  reg signed [26:0] add_cast_21;  // sfix27_En15
  reg signed [25:0] add_cast_22;  // sfix26_En15
  reg signed [33:0] add_cast_23;  // sfix34_En15
  reg signed [17:0] mul_temp_9;  // sfix18_En7
  reg signed [26:0] add_cast_24;  // sfix27_En15
  reg signed [17:0] add_cast_25;  // sfix18_En15
  reg signed [26:0] add_cast_26;  // sfix27_En15
  reg signed [17:0] mul_temp_10;  // sfix18_En7
  reg signed [26:0] add_cast_27;  // sfix27_En15
  reg signed [17:0] add_cast_28;  // sfix18_En15
  reg signed [26:0] add_cast_29;  // sfix27_En15
  reg signed [17:0] mul_temp_11;  // sfix18_En7
  reg signed [26:0] add_cast_30;  // sfix27_En15
  reg signed [17:0] add_cast_31;  // sfix18_En15
  reg signed [26:0] add_cast_32;  // sfix27_En15
  reg signed [17:0] mul_temp_12;  // sfix18_En7
  reg signed [26:0] add_cast_33;  // sfix27_En15
  reg signed [17:0] add_cast_34;  // sfix18_En15
  reg signed [26:0] add_cast_35;  // sfix27_En15
  reg signed [34:0] add_cast_36;  // sfix35_En15
  reg signed [34:0] add_cast_37;  // sfix35_En15
  reg signed [34:0] add_temp_4;  // sfix35_En15
  reg signed [34:0] add_cast_38;  // sfix35_En15
  reg signed [34:0] add_cast_39;  // sfix35_En15
  reg signed [34:0] add_temp_5;  // sfix35_En15
  reg signed [34:0] add_cast_40;  // sfix35_En15
  reg signed [34:0] add_cast_41;  // sfix35_En15
  reg signed [34:0] add_temp_6;  // sfix35_En15
  reg signed [34:0] add_cast_42;  // sfix35_En15
  reg signed [34:0] add_cast_43;  // sfix35_En15
  reg signed [34:0] add_temp_7;  // sfix35_En15


  always @(col, row) begin
    // r_in = double(r);
    // c_in = double(c);
    // col_adr = (216.3 - 0.06823*r_in + 0.3218*c_in - 0.000236*r_in^2 + 0.0002136*r_in*c_in + 0.0000007421*r_in^2*c_in);
    // row_adr = (196.8 + 0.01674*r_in + 5.779e-05*r_in^2);
    // Fixed-point 24-bit implementation
    if (row[9] != 1'b0) begin
      r_in = 9'b111111111;
    end
    else begin
      r_in = row[8:0];
    end
    // c1 = fi(216.3);
    //-0.5 for flooring
    y = r_in * r_in;
    y_0 = r_in * r_in;
    cast = {1'b0, r_in};
    mul_temp = 16'sb1011101000100010 * cast;
    if ((mul_temp[25] == 1'b0) && (mul_temp[24] != 1'b0)) begin
      add_cast = 25'sb0111111111111111111111111;
    end
    else if ((mul_temp[25] == 1'b1) && (mul_temp[24] != 1'b1)) begin
      add_cast = 25'sb1000000000000000000000000;
    end
    else begin
      add_cast = mul_temp[24:0];
    end
    add_cast_0 = {{3{add_cast[24]}}, add_cast};
    add_temp = 28'sb0011010111110011000000000000 + add_cast_0;
    add_cast_1 = {add_temp[27], add_temp};
    cast_0 = {1'b0, col};
    mul_temp_0 = 16'sb0101001001100001 * cast_0;
    if ((mul_temp_0[26] == 1'b0) && (mul_temp_0[25] != 1'b0)) begin
      add_cast_2 = 26'sb01111111111111111111111111;
    end
    else if ((mul_temp_0[26] == 1'b1) && (mul_temp_0[25] != 1'b1)) begin
      add_cast_2 = 26'sb10000000000000000000000000;
    end
    else begin
      add_cast_2 = mul_temp_0[25:0];
    end
    add_cast_3 = {add_cast_2[25], {add_cast_2, 2'b00}};
    add_temp_0 = add_cast_1 + add_cast_3;
    add_cast_4 = {add_temp_0[28], {add_temp_0, 9'b000000000}};
    cast_1 = {1'b0, y};
    mul_temp_1 = 16'sb1000010001000101 * cast_1;
    if ((mul_temp_1[34] == 1'b0) && (mul_temp_1[33] != 1'b0)) begin
      add_cast_5 = 34'sh1FFFFFFFF;
    end
    else if ((mul_temp_1[34] == 1'b1) && (mul_temp_1[33] != 1'b1)) begin
      add_cast_5 = 34'sh200000000;
    end
    else begin
      add_cast_5 = mul_temp_1[33:0];
    end
    add_cast_6 = {{5{add_cast_5[33]}}, add_cast_5};
    add_temp_1 = add_cast_4 + add_cast_6;
    add_cast_7 = {add_temp_1[38], add_temp_1};
    cast_2 = {1'b0, r_in};
    mul_temp_2 = 16'sb0110111111111101 * cast_2;
    if ((mul_temp_2[25] == 1'b0) && (mul_temp_2[24] != 1'b0)) begin
      cast_3 = 25'sb0111111111111111111111111;
    end
    else if ((mul_temp_2[25] == 1'b1) && (mul_temp_2[24] != 1'b1)) begin
      cast_3 = 25'sb1000000000000000000000000;
    end
    else begin
      cast_3 = mul_temp_2[24:0];
    end
    cast_4 = {1'b0, col};
    mul_temp_3 = cast_3 * cast_4;
    if ((mul_temp_3[35] == 1'b0) && (mul_temp_3[34] != 1'b0)) begin
      add_cast_8 = 35'sh3FFFFFFFF;
    end
    else if ((mul_temp_3[35] == 1'b1) && (mul_temp_3[34] != 1'b1)) begin
      add_cast_8 = 35'sh400000000;
    end
    else begin
      add_cast_8 = mul_temp_3[34:0];
    end
    add_cast_9 = {{5{add_cast_8[34]}}, add_cast_8};
    add_temp_2 = add_cast_7 + add_cast_9;
    add_cast_10 = {add_temp_2[39], {add_temp_2, 8'b00000000}};
    cast_5 = {1'b0, y_0};
    mul_temp_4 = 16'sb0110001110011010 * cast_5;
    if ((mul_temp_4[34] == 1'b0) && (mul_temp_4[33] != 1'b0)) begin
      cast_6 = 34'sh1FFFFFFFF;
    end
    else if ((mul_temp_4[34] == 1'b1) && (mul_temp_4[33] != 1'b1)) begin
      cast_6 = 34'sh200000000;
    end
    else begin
      cast_6 = mul_temp_4[33:0];
    end
    cast_7 = {1'b0, col};
    mul_temp_5 = cast_6 * cast_7;
    if ((mul_temp_5[44] == 1'b0) && (mul_temp_5[43] != 1'b0)) begin
      add_cast_11 = 44'sh7FFFFFFFFFF;
    end
    else if ((mul_temp_5[44] == 1'b1) && (mul_temp_5[43] != 1'b1)) begin
      add_cast_11 = 44'sh80000000000;
    end
    else begin
      add_cast_11 = mul_temp_5[43:0];
    end
    add_cast_12 = {{5{add_cast_11[43]}}, add_cast_11};
    col_adr = add_cast_10 + add_cast_12;
    // col_adr = c_in*c7;
    // r1 = fi(196.8);
    // r1 = fi(0.3);%-0.5 for flooring
    y_1 = r_in * r_in;
    cast_8 = {1'b0, r_in};
    mul_temp_6 = 16'sb0100010010010001 * cast_8;
    if ((mul_temp_6[25] == 1'b0) && (mul_temp_6[24] != 1'b0)) begin
      add_cast_13 = 25'sb0111111111111111111111111;
    end
    else if ((mul_temp_6[25] == 1'b1) && (mul_temp_6[24] != 1'b1)) begin
      add_cast_13 = 25'sb1000000000000000000000000;
    end
    else begin
      add_cast_13 = mul_temp_6[24:0];
    end
    add_cast_14 = {add_cast_13[24], add_cast_13};
    add_temp_3 = 26'sb00000011001100110011000000 + add_cast_14;
    add_cast_15 = {add_temp_3[25], {add_temp_3, 9'b000000000}};
    cast_9 = {1'b0, y_1};
    mul_temp_7 = 16'sb0111100100110010 * cast_9;
    if ((mul_temp_7[34] == 1'b0) && (mul_temp_7[33] != 1'b0)) begin
      add_cast_16 = 34'sh1FFFFFFFF;
    end
    else if ((mul_temp_7[34] == 1'b1) && (mul_temp_7[33] != 1'b1)) begin
      add_cast_16 = 34'sh200000000;
    end
    else begin
      add_cast_16 = mul_temp_7[33:0];
    end
    add_cast_17 = {{2{add_cast_16[33]}}, add_cast_16};
    row_adr = add_cast_15 + add_cast_17;
    // row_adr = r_in*r4;
    if (row_adr[35] == 1'b1) begin
      row_adr_fi = 9'b000000000;
    end
    else begin
      row_adr_fi = ({{2{row_adr[35]}}, row_adr[35:29]}) + $signed({1'b0, row_adr[28]});
    end
    if (((col_adr[48] == 1'b0) && (col_adr[47:45] != 3'b000)) || ((col_adr[48] == 1'b0) && (col_adr[44:35] == 10'b1111111111))) begin
      col_adr_fi = 10'b1111111111;
    end
    else if (col_adr[48] == 1'b1) begin
      col_adr_fi = 10'b0000000000;
    end
    else begin
      col_adr_fi = col_adr[44:35] + col_adr[34];
    end
    sub_cast = {{4{row_adr[35]}}, row_adr};
    sub_cast_0 = {2'b0, {row_adr_fi, 29'b00000000000000000000000000000}};
    deltaR_1 = sub_cast - sub_cast_0;
    sub_cast_1 = {{2{col_adr[48]}}, col_adr};
    sub_cast_2 = {6'b0, {col_adr_fi, 35'b00000000000000000000000000000000000}};
    deltaC_1 = sub_cast_1 - sub_cast_2;
    mem_sel1 = {row_adr_fi[0], col_adr_fi[0]};
    cast_10 = {1'b0, row_adr_fi};
    mul_temp_8 = cast_10 * 16'sb0101000000000000;
    if ((mul_temp_8[25] == 1'b0) && (mul_temp_8[24] != 1'b0)) begin
      add_cast_18 = 25'sb0111111111111111111111111;
    end
    else if ((mul_temp_8[25] == 1'b1) && (mul_temp_8[24] != 1'b1)) begin
      add_cast_18 = 25'sb1000000000000000000000000;
    end
    else begin
      add_cast_18 = mul_temp_8[24:0];
    end
    add_cast_19 = {add_cast_18[24], {add_cast_18, 8'b00000000}};
    add_cast_20 = {1'b0, col_adr_fi};
    add_cast_21 = {{2{add_cast_20[10]}}, {add_cast_20, 14'b00000000000000}};
    if ((add_cast_21[26] == 1'b0) && (add_cast_21[25] != 1'b0)) begin
      add_cast_22 = 26'sb01111111111111111111111111;
    end
    else if ((add_cast_21[26] == 1'b1) && (add_cast_21[25] != 1'b1)) begin
      add_cast_22 = 26'sb10000000000000000000000000;
    end
    else begin
      add_cast_22 = add_cast_21[25:0];
    end
    add_cast_23 = {{8{add_cast_22[25]}}, add_cast_22};
    Base_Adr = add_cast_19 + add_cast_23;
    case ( mem_sel1)
      2'b00 :
        begin
          A0r = 2'sb00;
          A0c = 2'sb00;
          A1r = 2'sb00;
          A1c = 2'sb00;
          A2r = 2'sb00;
          A2c = 2'sb00;
          A3r = 2'sb00;
          A3c = 2'sb00;
        end
      2'b01 :
        begin
          A0r = 2'sb00;
          A0c = 2'sb01;
          A1r = 2'sb00;
          A1c = 2'sb11;
          A2r = 2'sb00;
          A2c = 2'sb01;
          A3r = 2'sb00;
          A3c = 2'sb11;
        end
      2'b10 :
        begin
          A0r = 2'sb01;
          A0c = 2'sb00;
          A1r = 2'sb01;
          A1c = 2'sb00;
          A2r = 2'sb11;
          A2c = 2'sb00;
          A3r = 2'sb11;
          A3c = 2'sb00;
        end
      2'b11 :
        begin
          A0r = 2'sb01;
          A0c = 2'sb01;
          A1r = 2'sb01;
          A1c = 2'sb11;
          A2r = 2'sb11;
          A2c = 2'sb01;
          A3r = 2'sb11;
          A3c = 2'sb11;
        end
      default :
        begin
          A0r = 2'sb00;
          A0c = 2'sb00;
          A1r = 2'sb00;
          A1c = 2'sb00;
          A2r = 2'sb00;
          A2c = 2'sb00;
          A3r = 2'sb00;
          A3c = 2'sb00;
        end
    endcase
    mul_temp_9 = A0r * 16'sb0101000000000000;
    add_cast_24 = {mul_temp_9[17], {mul_temp_9, 8'b00000000}};
    add_cast_25 = {{2{A0c[1]}}, {A0c, 14'b00000000000000}};
    add_cast_26 = {{9{add_cast_25[17]}}, add_cast_25};
    A0 = add_cast_24 + add_cast_26;
    mul_temp_10 = A1r * 16'sb0101000000000000;
    add_cast_27 = {mul_temp_10[17], {mul_temp_10, 8'b00000000}};
    add_cast_28 = {{2{A1c[1]}}, {A1c, 14'b00000000000000}};
    add_cast_29 = {{9{add_cast_28[17]}}, add_cast_28};
    A1 = add_cast_27 + add_cast_29;
    mul_temp_11 = A2r * 16'sb0101000000000000;
    add_cast_30 = {mul_temp_11[17], {mul_temp_11, 8'b00000000}};
    add_cast_31 = {{2{A2c[1]}}, {A2c, 14'b00000000000000}};
    add_cast_32 = {{9{add_cast_31[17]}}, add_cast_31};
    A2 = add_cast_30 + add_cast_32;
    mul_temp_12 = A3r * 16'sb0101000000000000;
    add_cast_33 = {mul_temp_12[17], {mul_temp_12, 8'b00000000}};
    add_cast_34 = {{2{A3c[1]}}, {A3c, 14'b00000000000000}};
    add_cast_35 = {{9{add_cast_34[17]}}, add_cast_34};
    A3 = add_cast_33 + add_cast_35;
    add_cast_36 = {Base_Adr[33], Base_Adr};
    add_cast_37 = {{8{A0[26]}}, A0};
    add_temp_4 = add_cast_36 + add_cast_37;
    if (((add_temp_4[34] == 1'b0) && (add_temp_4[33:27] != 7'b0000000)) || ((add_temp_4[34] == 1'b0) && (add_temp_4[26:15] == 12'b111111111111))) begin
      Rd_Adr_0_1 = 12'b111111111111;
    end
    else if (add_temp_4[34] == 1'b1) begin
      Rd_Adr_0_1 = 12'b000000000000;
    end
    else begin
      Rd_Adr_0_1 = add_temp_4[26:15] + add_temp_4[14];
    end
    add_cast_38 = {Base_Adr[33], Base_Adr};
    add_cast_39 = {{8{A1[26]}}, A1};
    add_temp_5 = add_cast_38 + add_cast_39;
    if (((add_temp_5[34] == 1'b0) && (add_temp_5[33:27] != 7'b0000000)) || ((add_temp_5[34] == 1'b0) && (add_temp_5[26:15] == 12'b111111111111))) begin
      Rd_Adr_1_1 = 12'b111111111111;
    end
    else if (add_temp_5[34] == 1'b1) begin
      Rd_Adr_1_1 = 12'b000000000000;
    end
    else begin
      Rd_Adr_1_1 = add_temp_5[26:15] + add_temp_5[14];
    end
    add_cast_40 = {Base_Adr[33], Base_Adr};
    add_cast_41 = {{8{A2[26]}}, A2};
    add_temp_6 = add_cast_40 + add_cast_41;
    if (((add_temp_6[34] == 1'b0) && (add_temp_6[33:27] != 7'b0000000)) || ((add_temp_6[34] == 1'b0) && (add_temp_6[26:15] == 12'b111111111111))) begin
      Rd_Adr_2_1 = 12'b111111111111;
    end
    else if (add_temp_6[34] == 1'b1) begin
      Rd_Adr_2_1 = 12'b000000000000;
    end
    else begin
      Rd_Adr_2_1 = add_temp_6[26:15] + add_temp_6[14];
    end
    add_cast_42 = {Base_Adr[33], Base_Adr};
    add_cast_43 = {{8{A3[26]}}, A3};
    add_temp_7 = add_cast_42 + add_cast_43;
    if (((add_temp_7[34] == 1'b0) && (add_temp_7[33:27] != 7'b0000000)) || ((add_temp_7[34] == 1'b0) && (add_temp_7[26:15] == 12'b111111111111))) begin
      Rd_Adr_3_1 = 12'b111111111111;
    end
    else if (add_temp_7[34] == 1'b1) begin
      Rd_Adr_3_1 = 12'b000000000000;
    end
    else begin
      Rd_Adr_3_1 = add_temp_7[26:15] + add_temp_7[14];
    end
    //Memory Size = 25*160=4000(=2^12)
    mem_sel_1 = mem_sel1;
  end



  assign Rd_Adr_0 = Rd_Adr_0_1;

  assign Rd_Adr_1 = Rd_Adr_1_1;

  assign Rd_Adr_2 = Rd_Adr_2_1;

  assign Rd_Adr_3 = Rd_Adr_3_1;

  assign mem_sel = mem_sel_1;

  assign deltaR = deltaR_1;

  assign deltaC = deltaC_1;

endmodule  // BirdEyeViewImproved_ip_src_Line_Buffer_Read_Address

